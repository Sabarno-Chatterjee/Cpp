C++ Standard Template Library 


-> <bits/stdc++.h> : Master library for competitive programming.

-> Components of STL:
                    * Algorithms
                    * Containers
                    * Functions
                    * Iterators

-> PAIR: It is a part of the utility library.

        Eg: pair<int,int> p= {1,3};

            cout<<p.first<<" "<<p.second;

        Eg: pair<int,pair<int,int>> p= {1,{3,4}};

            cout<<p.first<<" "<<p.second.first<<" "<<p.second.second;

        Eg: Array of pairs

            pair<int,pair<string,string>> name[]={
                {1,{"Harry","Potter"}},
                {2,{"Hemione","Granger"}},
                {3,{"Ronald","Weasley"}}
            };

            cout<<name[0].first<<" : "<<name[0].second.first<<" "<<name[0].second.second<<endl;
            cout<<name[1].first<<" : "<<name[1].second.first<<" "<<name[1].second.second<<endl;
            cout<<name[2].first<<" : "<<name[2].second.first<<" "<<name[2].second.second<<endl;


-> Containers

    # Vectors
        Vector is a container which is dynamic in nature and hence we can increase it's size as per our need. In case we are unsure about the size requirements, vector is a safe bet. It stores elements in a similar fashion as an array.

        Declaration: vector<data_type> data_type_name; 
                     [Creates an empty container]

                Eg 1: vector<int> v;
                     v.push_back(1);[Adds an element to the container]
                     v.emplace_back(2);[Dynamically increases the space and adds an element]

                     Generically emplace_back() is faster than push_back.

                Eg 2: vector<pair<int,int>> v1;
                      v1.push_back({4,5});
                      or 
                      v1.emplace_back(4,5); [Assumes it a pair and no need to entire the braces]

                Eg 3: vector<int> v2(5, 100); [Will initialize a vector v2;    with 5 instances of 100]


                Eg 4: vector<int> v3(v2); [Will copy vector v2 into v3]

        We can access the elements in a similar fashion as we access elements from an array. Eg: cout<<v[0];

        Vectors are same as dynamic arrays with the ability to resize itself automatically when an element is inserted or deleted, with their storage being handled automatically by the container.

        * vector::at()
                
                at() function is used reference the element present at the position given as the parameter to the function. 

                Eg: cout << v.at(3);

        * vector::erase()
                
                erase() function is used to remove elements from a container from the specified position or range.

            Syntax:
                vector_name.erase(position);    
                [for deletion at specific position]
                Eg: v.erase(v.begin()+1);


                vector_name.erase(starting_position, ending_position);    
                [for deletion in range, here the starting position is inclusive but the ending is not]
                Eg: v.erase(v.begin()+1,v.begin()+4);

        * insert() – it is used to insert an element at a specified position.

                Eg:
                auto it= v.begin();
                v.insert(it,5); //inserting 5 at the beginning
                v.insert(v.begin()+1,2,5); //inserting 2 instances of 5 after the first element

                [insert() is costly in a vector compared to a list]

        * pop_back() – it deletes the last element and returns it to the    calling function.

                v1.pop_back();

        * front() – it returns a reference to the first element of the vector.
                
                v1.front();

        * back() – it returns a reference to the last element of the vector.
                
                v1.back();
        * clear() – deletes all the elements from the vector.
                
                v1.clear();
        * empty() – to check if the vector is empty or not.
                
                v1.empty();
        * size() – returns the size of the vector
                
                v1.size();                    

-> Iterators



    Iterators are used to point at the memory addresses of STL containers. They are primarily used in sequences of numbers, characters etc. They reduce the complexity and execution time of the program.

    Operations of iterators :-

        1. begin() :- This function is used to return the beginning position of the container.

        2. end() :- This function is used to return the after end position of the container.

    Syntax:
        vector<data_type>::iterator iterator_name = vector_name.begin()
        
        Eg: vector<int>::iterator it= v.begin();
            cout<<*(it)<<" ";
            it++;

            [As iterator points to the memory address we need to dereference it in order to access the element present in that memory address. In the above example we are first printing the element present in the it iterator and then incrementing it so that next time we can access the next value present in the vector]

    # Printing a vector using iterators
        
        Eg:
            for(vector<int>::iterator it=v.begin();it!=v.end();it++)
                cout<<*(it)<<" ";

        *auto keyword:

            for(auto it=v.begin();it!=v.end();it++)
                cout<<*(it)<<" ";

            [It automatically assigns the data type saves us the hassle of mentioning it everytime we use an iterator]


        *for each loop:

            for(auto it : v)
                cout<<it<<" ";

            [Here auto directly assigns the datatype of the element present in the vector and hence we do not have to derefernce "it" while printing]


    # List

        A list in STL is a contiguous container that allows the inserting and erasing of elements in constant time and iterating in both directions.

    Key functions:

        *push_back() – to insert an element at the end of the list.
            list<int> li;
            li.push_back(110);
            li.push_back(220);
        
        *push_front() – to insert an element at the front of the list.
            list<int> li;
            li.push_front(110);
            li.push_front(220);

        *sort() – sorts the list in ascending order.
            li.sort();

        [Rest of the functions are same in functionality as vectors]


    # Deque

        Double Ended Queue which is also called Deque is a type of queue data structure in which the insertion and deletion of elements can be either in front or rear. 

        [Functionality is same as list and vector]

    
    # Stack

        A stack is a non-primitive linear data structure. it is an ordered list in which the addition of a new data item and deletion of the already existing data item is done from only one end known as the top of the stack (TOS). The element which is added in last will be first to be removed and the element which is inserted first will be removed in last. As all the deletion and insertion in a stack are done from the top of the stack, the last added element will be the first to be removed from the stack. That is the reason why stack is also called Last-in-First-out (LIFO).

        [Trying to access data using index values is not permitted. Three main functions are "push","pop","top".]

        * push() – to insert an element in the stack.
           
            stack<int> s;
            s.push(110);
            s.push(220);

        * pop() – deletes the last element of the stack.
           
            s.pop();

        * top() – returns the element at the top of the stack.
            
            s.top();


    # Queue

        A queue is a linear list of elements in which deletions can take place only at one end called the front, and insertions can take place only at the end called the rear. The queue is a First In First Out type of data structure (FIFO), the terms FRONT and REAR are used in describing a linear list only when it is implemented as a queue.

        * pop() – deletes the first element of the queue.
            
            q.pop();

        * front() – returns a reference to the first element of the queue.
            
            q.front();
        
        * back() – returns a reference to the last element of the queue.
            
            q.back();


    # Priority Queue

        In the case of the max heap, priority queues are a type of container adaptors, specifically designed such that its first element is always the greatest of the elements it contains and the rest elements are in decreasing order.

        In the case of the min heap, priority queues are a type of container adaptors, specifically designed such that its first element is always the smallest of the elements it contains and the rest elements are in increasing order.
        

        * Syntax(Max heap):
            
            priority_queue<object_type> variable_name;
            
            Eg: priority_queue<int> pq;

        * Syntax(Min-heap):

            priority_queue<object_type,vector<object_type>,greater<object_type>> variable_name;
            
            Eg: priority_queue<int,vector<int>,greater<int>> pq;

        [Main functions push,pop,top]

        * push() – to insert an element in the priority queue.
            pq.push(110);
        
        * pop() – deletes the top element of the priority queue.
            pq.pop();
        
        * top() – returns the element at the top of the priority queue.
            pq.top();


    # Set

        A set in STL is a container that stores unique elements in a particular order. Every operation on a set takes O(1) complexity in the average case and takes O(n) in the worst case.

        [For upper bound and lower bound check: https://www.youtube.com/watch?v=edJ19qIL8WQ]


        * find() – to search an element in the set.

            set<int> s;
            s.insert(1);
            s.insert(2);
            if(s.find(2)!=s.end())
            cout<<"true"<<endl;

        * count() – returns true or false based on whether the element is   present in the set or not.
            
            set<int> s;
            s.insert(1);
            s.insert(2);
            s.count(2); //returns true

        * find() – to search an element in the set.

            set<int> s;
            s.insert(1);
            s.insert(2);
            if(s.find(2)!=s.end())
            cout<<"true"<<endl;


    # Multi Set

        A multiset in STL is an associative container just like a set the only difference is it can store duplicate elements in it.

        [Functionality is same as set except taht it can store duplicate elements]

        * erase(): to delete a single element or elements between a particular range.

            Eg: ms.erase(1) // all occurences of 1 are deleted
            Eg: ms.erase(ms.find(1)) //only the first occurence of 1 is deleted
            Eg: ms.erase(ms.find(1),ms.find(1)+2) // two occurences of 1 is deleted [that is we delete in a range]


    # Unordered set

        An unordered set in STL is a container that stores unique elements in no particular order. Every operation on an unordered set takes O(1) complexity in the average case and takes O(n) in the worst case.

        [lower_bound and upper_bound do not work, except that all the functionalities are same as set]

    # Map 

        Map in STL are associative containers where each element consists of a key value and a mapped value. Two mapped values cannot have the same key value. [The elements could be of any data type. Map stores unique keys in sorted order.]

        Syntax:
            map<object_type,object_type> variable_name;

            Eg:
            map<int,int> mpp;
            map<string,int> mpp;

    # Multi Map

        Multimap in STL are associative containers like maps where each element consists of a key value and a mapped value, the only difference is multimaps can store duplicate elements[i.e keys]. 


    # Unordered map

        Unordered_map in STL are associative containers where each element consists of a key value and a mapped value. Two mapped values cannot have the same key value. The elements can be in any order.