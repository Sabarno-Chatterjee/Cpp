C++ Standard Template Library 

-> <bits/stdc++.h> : Master library for competitive programming.

-> Components of STL:
                    * Algorithms
                    * Containers
                    * Functions
                    * Iterators

-> PAIR: It is a part of the utility library.

        Eg: pair<int,int> p= {1,3};

            cout<<p.first<<" "<<p.second;

        Eg: pair<int,pair<int,int>> p= {1,{3,4}};

            cout<<p.first<<" "<<p.second.first<<" "<<p.second.second;

        Eg: Array of pairs

            pair<int,pair<string,string>> name[]={
                {1,{"Harry","Potter"}},
                {2,{"Hemione","Granger"}},
                {3,{"Ronald","Weasley"}}
            };

            cout<<name[0].first<<" : "<<name[0].second.first<<" "<<name[0].second.second<<endl;
            cout<<name[1].first<<" : "<<name[1].second.first<<" "<<name[1].second.second<<endl;
            cout<<name[2].first<<" : "<<name[2].second.first<<" "<<name[2].second.second<<endl;


-> Containers

    # Vectors
        Vector is a container which is dynamic in nature and hence we can increase it's size as per our need. In case we are unsure about the size requirements, vector is a safe bet. It stores elements in a similar fashion as an array.

        Declaration: vector<data_type> data_type name; 
                     [Creates an empty container]

                Eg 1: vector<int> v;
                     v.push_back(1);[Adds an element to the container]
                     v.emplace_back(2);[Dynamically increases the space and adds an element]

                     Generically emplace_back() is faster than push_back.

                Eg 2: vector<pair<int,int>> v1;
                      v1.push_back({4,5});
                      or 
                      v1.emplace_back(4,5); [Assumes it a pair and no need to entire the braces]

                Eg 3: vector<int> v2(5, 100); [Will initialize a vector v2;    with 5 instances of 100]


                Eg 4: vector<int> v3(v2); [Will copy vector v2 into v3]

        We can access the elements in a similar fashion as we access elements from an array. Eg: cout<<v[0];
    